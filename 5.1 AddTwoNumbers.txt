/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
            ListNode prev_L1 = null, prev_L2 = null;
            ListNode next_L1 = l1, next_L2 = l2;
            ListNode dummyNode = null;
            int count1 = 0, count2 = 0;
            int carry = 0, sum;
            
            while(l1 != null || l2 != null)
            {
                  sum = carry + (l1 != null ? l1.val : 0) 
                                + (l2 != null ? l2.val : 0);
                    carry = sum / 10;
                    sum = sum % 10;
                    
                 if(l1 != null){
                         count1++;
                         prev_L1 = l1;
                         l1.val = sum;
                         l1 = l1.next;
                 }   
                    if(l2 != null){
                            count2++;
                            prev_L2 = l2;
                            l2.val = sum;
                            l2 = l2.next;
                    }
                    
            }
            
            if(carry > 0){
                 dummyNode = new ListNode(carry);
                    if(count1 > count2){
                             prev_L1.next = dummyNode;
                             return next_L1;
                    }
                    else if(count1 < count2){
                             prev_L2.next = dummyNode;
                              return next_L2;
                    }
                    else
                           prev_L1.next = dummyNode;
                           return next_L1;
            }
            else
            {
            if(count1 > count2)
                    return next_L1;
            else if(count1 < count2)
                    return next_L2;
            }
            return next_L1;
    }
}
